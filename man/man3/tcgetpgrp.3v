.\"  @(#)tcgetpgrp.3v 1.1 92/07/30 SMI; new for 4.1, POSIX
.TH TCGETPGRP 3V "21 January 1990"
.SH NAME
tcgetpgrp, tcsetpgrp \- get, set foreground process group ID
.SH SYNOPSIS
.LP
.nf
.ft B
#include <sys/types.h>
.ft
.fi
.LP
.nf
.ft B
pid_t tcgetpgrp(fd)
int fd;
.ft
.fi
.LP
.nf
.ft B
int tcsetpgrp(fd, pgrp_id)
int fd;
pid_t pgrp_id;
.ft R
.fi
.SH DESCRIPTION
.IX "tcgetpgrp()" "" "\fLtcgetpgrp()\fR \(em get foreground process group ID" ""
.IX "get" "foreground process group ID"
.IX "group ID" "get foreground process group ID"
.IX "tcsetpgrp()" "" "\fLtcsetpgrp()\fR \(em set foreground process group ID" ""
.IX "set" "foreground process group ID"
.IX "group ID" "set foreground process group ID"
.LP
.B tcgetpgrp(\|) 
returns the value of the process group
.SM ID
of the foreground process group associated with the terminal (see
.SM NOTES\s0).
.B tcgetpgrp(\|)
is allowed from a process that is a member 
of a background process group;
however, the information may be 
subsequently changed by a process that is a member of a foreground 
process group.
.LP
If the process has a controlling terminal,
.B tcsetpgrp(\|) 
sets the foreground process group
.SM ID
associated with the terminal to
.IR pgrp_id .
The file associated with
.I fd
must be the controlling terminal and must be currently
associated with the session of the calling process.
The value of
.I pgrp_id
must match a process group
.SM ID
of a process in the same session as the calling process.
.SH RETURN VALUES
.LP
On success,
.B tcgetpgrp(\|)
returns
the process group
.SM ID
of the foreground process group associated with the terminal.
On failure,
it returns
\-1
and sets
.B errno
to indicate the error.
.LP
.B tcsetpgrp(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.
.SH ERRORS
.LP
If any of the following conditions occur, 
.B tcgetpgrp(\|)
sets
.B errno
to:
.TP 15
.SM EBADF
.I fd
is not a valid file descriptor.
.TP
.SM ENOSYS
.B tcgetpgrp(\|)
is not supported in this implementation.
.TP
.SM ENOTTY
The calling process does not have a controlling terminal.
.IP
The file is not the controlling terminal.
.LP
If any of the following conditions occur, 
.B tcsetpgrp(\|)
sets
.B errno
to:
.TP 15
.SM EBADF
.I fd 
is not a valid file descriptor.
.TP
.SM EINVAL
The value of 
.I pgrp_id 
is not a valid process group
.SM ID\s0.
.TP
.SM ENOTTY
The calling process does not have a controlling terminal.
.IP
The file is not the controlling terminal.
.IP
The controlling terminal is no longer associated with
the session of the calling process.
.TP
.SM EPERM
The value of
.I pgrp_id
is a valid process group
.SM ID\s0,
but does not match the process group 
.SM ID 
of a process in the same session as the calling process.
.SH SEE ALSO
.BR setpgid (2V),
.BR setsid (2V)
.br
.ne 7
.SH NOTES
.LP
For
.B tcgetpgrp(\|)
and
.B tcsetpgrp(\|)
to behave as described above,
.SM {_POSIX_JOB_CONTROL}
must be in effect (see
.BR sysconf (2V)).
.SM {_POSIX_JOB_CONTROL}
is always in effect
on SunOS systems, but for portability, applications should call
.B sysconf(\|)
to determine whether
.SM {_POSIX_JOB_CONTROL}
is in effect for the current system.
.LP
If
.SM {_POSIX_JOB_CONTROL}
is not defined on a system conforming to
.I IEEE Std 1003.1-1988
either
.B tcgetpgrp(\|)
and
.B tcsetpgrp(\|)
behave as described above, or 
.B tcgetpgrp(\|)
and
.B tcsetpgrp(\|) 
fail.
