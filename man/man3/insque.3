.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\" @(#)insque.3 1.1 92/07/30 SMI; from UCB 6.2 5/20/86
.TH INSQUE 3 "6 October 1987"
.SH NAME
insque, remque \- insert/remove element from a queue
.SH SYNOPSIS
.nf
.ft B
struct qelem {
	struct	qelem *q_forw;
	struct	qelem *q_back;
	char	q_data[\|];
};
.LP
.ft B
insque(elem, pred)
struct qelem *elem, *pred;
.LP
.ft B
remque(elem)
struct qelem *elem;
.ft R
.fi
.IX  "insque()"  ""  "\fLinsque()\fP \(em insert element in queue"
.IX  "remque()"  ""  "\fLremque()\fP \(em remove element from queue"
.IX  "insert element in queue"  ""  "insert element in queue \(em \fLinsque()\fP"
.IX  remove "element from queue \(em \fLremque()\fP"
.IX  queue  "insert element in"  queue  "insert element in \(em \fLinsque()\fP"
.IX  queue  "remove element from"  queue  "remove element from \(em \fLremque()\fP"
.SH DESCRIPTION
.LP
.B insque(\|)
and
.B remque(\|)
manipulate queues built from doubly linked lists.  Each
element in the queue must be in the form of ``struct qelem''.
.B insque(\|)
inserts
.I elem
in a queue immediately after
.IR pred ;
.B remque(\|)
removes an entry
.I elem
from a queue.
