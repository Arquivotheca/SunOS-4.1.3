.\" @(#)indent.1 1.1 92/07/30 SMI;.
.TH INDENT 1 "9 September 1987"
.SH NAME
indent \- indent and format a C program source file
.SH SYNOPSIS
.in +\w'\fBindent \fR'u
.ti -\w'\fBindent \fR'u
.B indent 
.I input-file
[
.I output-file
] [
[\ \fB\-bap\fR\ |\ \fB\-nbap\fR\ ]
[\ \fB\-bacc\fR\ |\ \fB\-nbacc\fR\ ]
[\ \fB\-bad\fR\ |\ \fB\-nbad\fR\ ]
[\ \fB\-bbb\fR\ |\ \fB\-nbbb\fR\ ]
[\ \fB\-bc\fR\ |\ \fB\-nbc\fR\ ]
[\ \fB\-bl\fR\ ]
[\ \fB\-br\fR\ ]
[\ \fB\-bs\fR\ |\ \fB\-nbs\fR\ ]
[\ \fB\-c\fIn\fR\ ]
[\ \fB\-cd\fIn\fR\ ]
[\ \fB\-cdb\fR\ |\ \fB\-ncdb\fR\ ]
[\ \fB\-ce\fR\ |\ \fB\-nce\fR\ ]
[\ \fB\-ci\fIn\fR\ ]
[\ \fB\-cli\fIn\fR\ ]
[\ \fB\-d\fIn\fR\ ]
[\ \fB\-di\fIn\fR\ ]
[\ \fB\-eei\fR\ |\ \fB\-neei\fR\ ]
[\ \fB\-fc1\fR\ |\ \fB\-nfc1\fR\ ]
[\ \fB\-i\fIn\fR\ ]
[\ \fB\-ip\fR\ |\ \fB\-nip\fR\ ]
[\ \fB\-l\fIn\fR\ ]
[\ \fB\-lc\fIn\fR\ ]
[\ \fB\-lp\fR\ |\ \fB\-nlp\fR\ ]
[\ \fB\-pcs\fR\ |\ \fB\-npcs\fR\ ]
[\ \fB\-npro\fR\ ]
[\ \fB\-psl\fR\ |\ \fB\-npsl\fR\ ]
[\ \fB\-sc\fR\ |\ \fB\-nsc\fR\ ]
[\ \fB\-sob\fR\ |\ \fB\-nsob\fR\ ]
[\ \fB\-st\fR\ ]
[\ \fB\-troff\fR\ ]
[\ \fB\-v\fR\ |\ \fB\-nv\fR\ ]
.SH DESCRIPTION
.IX  indent  ""  "\fLindent\fP \(em format C source"
.IX  "programming tools"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "languages"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "C programming language"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "pretty printer"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "format C programs" "" "format C programs \(em \fLindent\fP"
.IX  "code formatter"  "indent"  ""  "\fLindent\fP \(em format C source"
.\".IX  "cb"  "indent"  "\fLcb\fP"  "try \fLindent\fP \(em format C source"
.LP
.B indent
is a C program formatter.  It reformats the C
program in the
.I input-file
according to the switches.  The switches which can
be specified are described below.
They may appear before or after the file
names.
.LP
Note: if you only specify an
.IR input-file ,
the formatting is
done \*(lqin-place\*(rq, that is, the formatted
file is written back into
.I input-file
and a backup copy of
.I input-file
is written in the current directory.  If
.I input-file
is named
.BR /blah/blah/file ,
the backup file is named
.BR file.\|\s-1BAK\s0 .
.LP
If
.I output-file
is specified,
.B indent
checks to make sure it is different from
.IR input-file .
.SH OPTIONS
.LP
The options listed below control the formatting style imposed by
.BR indent .
.TP 15
.BR \-bap , \-nbap
If
.B \-bap
is specified, a blank line is forced after
every procedure body.  Default:
.B \-nbap.
.TP
.BR \-bacc , \-nbacc
If
.B \-bacc
is specified, a blank line is forced around every conditional
compilation block.  That is. in front of every
.B #ifdef
and after every
.BR #endif .
Other blanklines surrounding these will be swallowed.
Default: 
.B \-nbacc.
.TP
.BR \-bad , \-nbad
If
.B \-bad
is specified, a blank line is forced after every block of
declarations.  Default: 
.B \-nbad.
.TP
.BR \-bbb , \-nbbb
If
.B \-bbb
is specified, a blank line is forced before
every block comment.  Default:
.B \-nbbb.
.TP
.BR \-bc , \-nbc
If
.B \-bc
is specified, then a
.SM NEWLINE
is forced after each comma in a declaration.
.B \-nbc
turns off this option.  The default is
.BR \-bc .
.TP
.BR \-br , \-bl
Specifying
.B \-bl
lines up compound statements like this:
.ne 4
.RS
.RS
.nf
.ft B
if (\|.\|.\|.)
{
.ft R
.RS
.RS
.RS
.B code
.RE
.RE
.RE
.B }
.fi
.RE
.RE
.IP
Specifying
.B \-br
(the default) makes them look like this:
.ne 3
.RS
.RS
.sp .5
.nf
.ft B
if (...) {
.ft R
.RS
.RS
.RS
.B code
.RE
.RE
.RE
.B }
.fi
.RE
.RE
.LP
.TP
.BR \-bs , \-nbs
Enable (disable) the forcing of a blank after
.BR sizeof .
Some people believe that
.B sizeof
should appear as though it were a procedure call
(\fB\-nbs\fR,
the default) and some people believe that since
.B sizeof
is an operator, it should always be treated
that way and should always have a
blank after it.
.TP
.BI \-c n
The column in which comments on code start.  The default is 33. 
.TP
.BI \-cd n
The column in which comments on declarations start.  The default
is for these comments to start in the same column as those on code.
.br
.ne 5
.TP
.BI \-cdb , \-ncdb
Enable (disable) the placement of comment
delimiters on blank lines.  With
this option enabled, comments look like this:
.ne 3
.RS
.nf
.ft B
/*
* this is a comment
*/
.ft R
.fi
.RE
.LP
Rather than like this:
.IP
.B /* this is a comment */
.LP
This only affects block comments, not comments
to the right of code. The default is
.B \-cdb .
.TP
.BI \-ce , \-nce
Enables (disables) forcing
.BR else 's
to cuddle up to the immediately preceding
.RB ` } '.
The default is
.BR \-ce .
.TP
.BI \-ci n
Sets the continuation indent to be
.IR n .
Continuation
lines will be indented that far from the
beginning of the first line of the
statement.  Parenthesized expressions have extra indentation added to
indicate the nesting, unless
.B \-lp
is in effect.
.B \-ci
defaults to the same value
as
.BR \-i .
.TP
.BI \-cli n
Cause case labels to be indented
.I n
tab stops to the right of the containing
.B switch
statement.
.B -cli0.5
causes case labels to be indented half a tab stop.
The
default is
.B \-cli0 .
.TP
.BI \-d n
Control the placement of comments which are not to the
right of code.  The default
.B \-d1
means that such comments are placed one indentation level to the
left of code.  Specifying
.B \-d0
lines up these comments with the code.  See the section on comment
indentation below.
.TP
.BI \-di n
Specify the indentation, in character
positions, from a declaration keyword
to the following identifier.  The default is
.B \-di16 .
.if 0 \{.TP 15
.BR \-dj , \-ndj
.B \-dj
left justifies declarations.
.B \-ndj
indents declarations the same as code.  The default is
.BR \-ndj .
.TP
.BI \-ei , \-nei
Enable (disables) special
.B else-if
processing.  If it's enabled,
.BR if "s"
following
.BR else "s"
will have the same indentation as the preceding
.B if
statement.\}
.TP
.BR \-eei , \-neei
If
.B \-eei
is specified, and extra expression indent
is applied on continuation lines
of the expression part of
.BR if (\|)
and
.BR while (\|).
These continuation lines will
be indented one extra level \(em twice instead
of just once.  This is to avoid
the confusion between the continued expression
and the statement that
follows the
.BR if (\|)
or
.BR while (\|).
Default: 
.B \-neei.
.TP
.BI \-fc1 , \-nfc1
Enables (disables) the formatting of comments that start in column 1.
Often, comments whose leading
.RB ` / '
is in column 1 have been carefully
hand formatted by the programmer.  In such cases,
\fB\-nfc1\fR
should be
used.  The default is
.BR \-fc1 .
.TP
.BI \-i n
The number of spaces for one indentation level.  The default is 4.
.TP
.BI \-ip , \-nip
Enables (disables) the indentation of parameter
declarations from the left
margin.  The default is
.B \-ip .
.TP
.BI \-l n
Maximum length of an output line with a trailing comment.
The default is 78.
.TP
.BI \-lc n
Sets the line length for block comments to
.IR n .
It defaults to being
the same as the usual line length as specified with
.BR \-l .
.TP
.BI \-lp , \-nlp
Lines up code surrounded by parenthesis
in continuation lines.  If a line
has a left paren which is not closed
on that line, then continuation lines
will be lined up to start at the character
position just after the left
parenthesis.  For example, here is how a piece
of continued code looks with
.B \-nlp
in effect:
.ne 2
.RS
.RS
.sp .5
.nf
.B "p1 = first_procedure(second_procedure(p2, p3),"
.B "                     third_procedure(p4, p5));"
.fi
.RE
.RE
.ne 5
.IP
With
.B \-lp
in effect (the default) the code looks somewhat
clearer:
.RS
.RS
.sp .5
.nf
.B "p1 = first_procedure(second_procedure(p2, p3),"
.B "                     third_procedure(p4, p5));"
.fi
.RE
.RE
.ne 5
.IP
Inserting a couple more
.SM NEWLINE
characters we get:
.RS
.RS
.sp .5
.nf
.B "p1 = first_procedure(second_procedure(p2,"
.B "                                      p3),"
.B "                     third_procedure(p4,"
.B "                                     p5));"
.fi
.RE
.RE
.TP
.B \-npro
Ignore the profile files,
.B .\|/.indent.pro
and
.BR ~/.indent.pro .
.TP
.B \-pcs , \-npcs
If true
.RB ( \-pcs )
all procedure calls will have a space inserted between
the name and the
.RB ' ( '.
The default is
.B \-npcs
.TP
.B \-psl , \-npsl
If true
.RB ( \-psl )
the names of procedures being defined are placed in
column 1 \(em their types, if any, will be
left on the previous lines.  The
default is
.BR -psl .
.TP
.BI \-sc , \-nsc
Enables (disables) the placement of asterisks
.RB (` * 's)
at the left edge of all
comments.
.TP
.BR \-sob , \-nsob
If
.B \-sob
is specified, indent will swallow optional
blank lines.  You can use this to
get rid of blank lines after declarations.  Default:
.B \-nsob
.TP
.B \-st
.B indent
takes its input from the standard input, and put its output to the
standard output.
.TP
.BI \-T " typename"
Add
.I typename
to the list of type keywords.  Names accumulate:
.B \-T
can be specified more than once.
You need to specify all the typenames that
appear in your program that are defined by
.BR typedef s
\(em nothing will
be harmed if you miss a few, but the
program won't be formatted as nicely as
it should.  This sounds like a painful thing
to have to do, but it is really a symptom of a problem in C:
.B typedef
causes a syntactic change in the
language and
.I indent
cannot find all
.BR typedef s.
.TP
.B \-troff
Causes
.B indent
to format the program for processing by
.BR troff .
It will produce a fancy
listing in much the same spirit as
.BR vgrind.
If the output file is not specified, the default is standard output,
rather than formatting in place.
The usual way to get a
.BR troff ed
listing is with the command
.RS
.IP
.BI "indent -troff " program.c " | troff -mindent"
.RE
.TP
.BR \-v , \-nv
.B \-v
turns on \*(lqverbose\*(rq mode,
.B \-nv
turns it off.  When in verbose mode,
.B indent
reports when it splits one line of input
into two or more lines of output,
and gives some size statistics at completion. The default is
.BR \-nv .
.SH "FURTHER DESCRIPTION"
.LP
You may set up your own \*(lqprofile\*(rq of defaults to
.B indent
by creating a file called
.B .indent.pro
in either your login directory or the
current directory and including
whatever switches you like.  An
.B .indent.pro
in the current directory takes
precedence over the one in your login directory.  If
.B indent
is run and a profile file exists, then
it is read to set up the program's
defaults.  Switches on the command line,
though, always override profile
switches.  The switches should be separated by
.SM SPACE\s0,
.SM TAB\s0,
or
.SM NEWLINE
characters.
.SS Comments
.TP 15
Boxed
.B indent
assumes that any comment with a dash or star
immediately after the start of
comment (that is,
.RB ` /*\-' or `/** ')
is a comment surrounded by a box of stars.
Each line of such a comment is left unchanged,
except that its indentation
may be adjusted to account for the change
in indentation of the first line
of the comment.
.br
.ne 5
.TP
Straight text
All other comments are treated as straight text.
.B indent
fits as many words (separated by
.SM SPACE\s0,
.SM TAB\s0,
or
.SM NEWLINE
characters) on a
line as possible.  Blank lines break paragraphs.
.SS Comment indentation
.LP
If a comment is on a line with code it is started
in the \*(lqcomment column\*(rq,
which is set by the
.BI \-c n
command line parameter.  Otherwise, the comment is started at
.I n
indentation levels less than where code is
currently being placed, where
.I n
is specified by the
.BI \-d n
command line parameter.  If the code on a
line extends past the comment
column, the comment starts further to the
right, and the right margin may be
automatically extended in extreme cases.
.SS Preprocessor lines
.LP
In general,
.B indent
leaves preprocessor lines alone.  The only
reformatting that it will do is to straighten
up trailing comments.  It
leaves imbedded comments alone.  Conditional compilation
.RB ( #ifdef\|.\|.\|.\|#endif )
is recognized and
.B indent
attempts to correctly
compensate for the syntactic peculiarities introduced.
.SS C syntax
.LP
.B indent
understands a substantial amount about the syntax of C, but
it has a \*(lqforgiving\*(rq parser.
It attempts to cope with the usual sorts of
incomplete and misformed syntax.
In particular, the use of macros like:
.IP
.B #define forever for(;;)
.LP
is handled properly.
.SH FILES
.PD 0
.TP 20
.B .\|/.indent.pro
profile file
.TP
.B ~/.indent.pro
profile file
.TP
.B /usr/share/lib/tmac/tmac.indent
troff macro package for 
.RB ` "indent \-troff" '
output.
.PD
.SH SEE ALSO
.BR ls (1V),
.BR troff (1)
.SH BUGS
.B indent
has even more switches than
.BR ls (1V).
.LP
A common mistake that often causes grief is typing:
.IP
.B indent *.c
.LP
to the shell in an attempt to indent all the C
programs in a directory.
This is probably a bug, not a feature.
.LP
The
.B \-bs
option splits an excessively fine hair.
