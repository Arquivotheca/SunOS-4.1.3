.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\" @(#)sigpause.2v 1.1 92/07/30 SMI; from UCB 6.2 5/15/86
.TH SIGPAUSE 2V "21 January 1990"
.\" this NAME line adequate?
.SH NAME
sigpause, sigsuspend \- automatically release blocked signals and wait for interrupt
.SH SYNOPSIS
.nf
.ft B
int sigpause(sigmask)
int sigmask;
.ft
.fi
.LP
.nf
.ft B
#include <signal.h>
.ft
.fi
.LP
.nf
.ft B
int sigsuspend(sigmaskp)
sigset_t *sigmaskp;
.ft R
.fi
.IX  sigpause  "" "\fLsigpause\fP \(em release blocked signals, wait for interrupt"
.IX  signals  sigpause()  ""  \fLsigpause()\fP
.IX  "release blocked signals \(em \fLsigpause()\fR"
.IX  "blocked signals, release \(em \fLsigpause()\fR"
.IX  "interrupts, release blocked signals \(em \fLsigpause()\fR"
.SH DESCRIPTION
.LP
.B sigpause(\|)
assigns
.I sigmask
to the set of masked signals
and then waits for a signal to arrive;
on return the set of masked signals is restored.
.I sigmask
is usually 0 to indicate that no
signals are now to be blocked.
.B sigpause(\|)
always terminates by being interrupted, returning
.SM EINTR\s0.
.LP
In normal usage, a signal is blocked using
.BR sigblock (2),
to begin a critical section, variables modified on the occurrence
of the signal are examined to determine that there is no work
to be done, and the process pauses awaiting work by using
.B sigpause(\|)
with the mask returned by
.BR sigblock(\|) .
.LP
.B sigsuspend(\|)
replaces the process's
signal mask with the set of signals pointed to by
.I sigmaskp
and then suspends the process until delivery of a signal whose action
is either to execute a signal-catching function or to terminate the
process.
If the action is to terminate the process, 
.B sigsuspend(\|)
does not return.
If the action is to execute a
signal-catching function, 
.B sigsuspend(\|) 
returns after the
signal-catching function returns,
with the signal mask restored to the
setting that existed prior to the
.B sigsuspend(\|)
call.
It is not possible to
block those signals that cannot be ignored, as documented in
.B <signal.h>
this is enforced by the system without indicating an error.
.SH RETURN VALUES
.LP
Since
.B sigpause(\|)
and
.B sigsuspend(\|)
suspend process execution indefinitely,
there is no successful completion return value.
On failure,
these functions return
\-1
and set
.B errno
to indicate the error.
.SH ERRORS
.TP 15
.SM EINTR
A signal is caught by the calling process and control 
is returned from the signal-catching function.
.SH SEE ALSO
.BR sigblock (2),
.BR sigpending (2V),
.BR sigprocmask (2V),
.BR sigvec (2),
.BR pause (3V),
.BR sigaction (3V),
.BR signal (3V),
.BR sigsetops (3V)
