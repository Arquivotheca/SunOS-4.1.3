.\" @(#)mknod.2v 1.1 92/07/30 SMI; from UCB 4.3
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.TH MKNOD 2V "21 January 1990"
.SH NAME
mknod, mkfifo \- make a special file
.SH SYNOPSIS
.LP
.nf
.ft B
#include <sys/types.h>
#include <sys/stat.h>
.ft
.fi
.LP
.nf
.ft B
int mknod(path, mode, dev)
char *path;
int mode, dev;
.ft
.fi
.LP
.nf
.ft B
int mkfifo(path, mode)
char *path;
mode_t mode;
.ft R
.fi
.IX  mknod()  ""  \fLmknod()\fP
.IX  "file system"  mknod()  ""  \fLmknod()\fP
.IX  make "special file"
.IX  create "special file"
.IX  "special file"  make
.IX "named pipe" make
.IX make "named pipe"
.IX "FIFO (named pipe)" make
.IX make "FIFO (named pipe)"
.SH DESCRIPTION
.LP
.B mknod(\|)
creates a new file named by the path name pointed to by
.IR path .
The mode of the new file (including file type bits)
is initialized from
.IR mode .
The values of the file type bits which are permitted are:
.LP
.RS
.nf
.ta 1.6i 2.5i 3i
.ft B
#define\ \ \ \ \s-1S_IFCHR\s0	0020000	/* character special */
#define\ \ \ \ \s-1S_IFBLK\s0	0060000	/* block special */
#define\ \ \ \ \s-1S_IFREG\s0	0100000	/* regular */
#define\ \ \ \ \s-1S_IFIFO\s0	0010000	/* \s-1FIFO\s0 special */
.ft R
.fi
.RE
.LP
Values of
.I mode
other than those above are undefined
and should not be used.
.LP
The access permissions of the mode
are modified by the process's mode mask (see
.BR umask (2V)).
.LP
The owner
.SM ID
of the file is set to the effective user
.SM ID
of the process.
The group
.SM ID
of the file is set to either:
.RS
.TP 3
\(bu
the effective group
.SM ID
of the process, if the filesystem was not
mounted with the
.SM BSD
file-creation semantics flag (see
.BR mount (2V))
and the set-gid bit of the parent directory is clear, or
.TP 3
\(bu
the group
.SM ID
of the directory in which the file is created.
.RE
.LP
If
.I mode
indicates a block or character special file,
.I dev
is a configuration dependent specification of a character or block
I/O device.  If
.I mode
does not indicate a block special or character special device,
.I dev
is ignored.
.LP
.B mknod(\|)
may be invoked only by the super-user for file types other than
.SM FIFO
special.
.LP
.B mkfifo(\|)
creates a new 
.SM FIFO
special file named by the pathname pointed to by
.IR path .
The access permissions of the new 
.SM FIFO
are initialized from
.IR mode .
The access permissions of
.I mode
are modified by the process's file creation mask, see
.BR umask (2V).
Bits in
.I mode
other than the access permissions are ignored.
.LP
The 
.SM FIFO\s0's
owner
.SM ID 
is set to the process's effective user
.SM ID\s0.
The 
.SM FIFO\s0's
group
.SM ID
is set to the group
.SM ID
of the directory in which the 
.SM FIFO
is being created or to the process's effective group
.SM ID\s0.
.LP
Upon successful completion, the
.B mkfifo(\|)
function marks for update the
.BR st_atime ,
.BR st_ctime ,
and
.B st_mtime 
fields of the file.
Also, the
.B st_ctime
and
.B st_mtime
fields of the directory that contains the new
entry are marked for update.
.SH RETURN VALUES
.LP
.B mknod(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.
.LP
.B mkfifo(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.  No
.SM FIFO
is created.
.SH ERRORS
.LP
.B mknod(\|)
fails and the file mode remains unchanged if:
.TP 20
.SM EACCES
Search permission is denied for a component of the path prefix of
.IR path .
.TP
.SM EDQUOT
The directory in which the entry for the new file
is being placed cannot be extended because the user's
quota of disk blocks on the file system containing
the directory has been exhausted.
.TP
.SM EDQUOT
The user's quota of inodes on the file system on
which the node is being created has been exhausted.
.TP
.SM EEXIST
The file referred to by
.I path
exists.
.TP
.SM EFAULT
.I path
points outside the process's allocated address space.
.TP
.SM EIO
An I/O error occurred while reading from or writing to the file system.
.TP
.SM EISDIR
The specified
.I mode
would have created a directory.
.TP
.SM ELOOP
Too many symbolic links were encountered in translating
.IR path .
.TP
.SM ENAMETOOLONG
The length of the path argument exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
(see
.BR sysconf (2V))
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENOENT
A component of the path prefix of
.I path
does not exist.
.TP
.SM ENOSPC
The directory in which the entry for the new file
is being placed cannot be extended because there is
no space left on the file system containing the directory.
.TP
.SM ENOSPC
There are no free inodes on the file system on which the file is being created.
.TP
.SM ENOTDIR
A component of the path prefix of
.I path
is not a directory.
.TP
.SM EPERM
An attempt was made to create a file of type other than
.SM FIFO
special and
the process's effective user
.SM ID
is not super-user.
.TP
.SM EROFS
The file referred to by
.I path
resides on a read-only file system.
.LP
.B mkfifo(\|)
may set
.B errno
to:
.TP 20
.SM EACCES
A component of the path prefix denies search permission.
.TP
.SM EEXIST
The named file already exists.
.TP
.SM ENAMETOOLONG
The length of the path string exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENOENT
A component of the path prefix does not exist.
.IP 
.I path
points to an empty string.
.TP
.SM ENOSPC
The directory that would contain the new file cannot be
extended.
.IP
The file system is out of file allocation resources.
.TP
.SM ENOTDIR
A component of the path prefix is not a directory.
.TP
.SM EROFS
The named file resides on a read-only file system.
.SH SEE ALSO
.BR chmod (2V),
.BR execve (2V),
.BR pipe (2V),
.BR stat (2V),
.BR umask (2V),
.BR write (2V)
