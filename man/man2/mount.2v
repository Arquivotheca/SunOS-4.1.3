.\" @(#)mount.2v 1.1 92/07/30 SMI; from UCB 4.2
.TH MOUNT 2V "5 July 1990"
.SH NAME
mount \- mount file system
.SH SYNOPSIS
.nf
.ft B
#include <sys/mount.h>
.ft
.fi
.LP
.nf
.ft B
int mount(type, dir, \s-1M_NEWTYPE\s0\||\|flags, data)
char *type;
char *dir;
int flags;
caddr_t data;
.ft
.fi
.IX  mount()  ""  \fLmount()\fP
.IX  "file system"  mount()  ""  \fLmount()\fP
.IX  "system operation support"  mount()  ""  \fLmount()\fP
.SH SYSTEM V SYNOPSIS
.LP
.nf
.ft B
int mount(spec, dir, rdonly)
char *spec;
char *dir;
int rdonly;
.ft
.fi
.SH DESCRIPTION
.LP
.B mount(\|)
attaches a file system to a directory.
After a successful return, references to directory
.I dir
will refer to the root directory on the newly mounted file system.
.I dir
is a pointer to a null-terminated string
containing a path name.
.I dir
must exist already, and must be a directory.  Its old contents
are inaccessible while the file system is mounted.
.LP
.B mount(\|)
may be invoked only by the super-user.
.LP
The
.I flags
argument is constructed by the logical OR of the following bits
(defined in
.BR <sys/mount.h> ):
.TP 15
.SB M_RDONLY
mount filesystem read-only.
.TP
.SB M_NOSUID
ignore set-uid bit on execution.
.TP
.SB M_NEWTYPE
this flag must always be set.
.TP
.SB M_GRPID
use
.SM BSD
file-creation semantics (see
.BR open (2V)).
.TP
.SB M_REMOUNT
change options on an existing mount.
.TP
.SB M_NOSUB
disallow mounts beneath this filesystem.
.LP
Physically write-protected and magnetic tape file systems must be mounted
read-only or errors will occur when access times are updated, whether
or not any explicit write is attempted.
.LP
The
.I type
string indicates the type of the filesystem.
.I data
is a pointer to a structure which contains the type specific
arguments to mount.  Below is a list of the filesystem types supported
and the type specific arguments to each:
.nf
.ta \w'#include'u +\w'fhandle_t\0\0'u +\w'\(**hostname;\0\0'u
.RS
.TP 4
.B "4.2"
.ft B
struct ufs_args {
	char	\(**fspec;	/* Block special file to mount */
};
.ft R
.TP 4
\fB"lo"\fR
.ft B
struct lo_args {
	char	\(**fsdir;	/* Pathname of directory to mount */
};
.TP 4
\fB"nfs"\fR
.ft B
#include	<nfs/nfs.h>
#include	<netinet/in.h>
struct nfs_args {
	struct sockaddr_in  \(**addr; /* file server address */
	fhandle_t	\(**fh;	/* File handle to be mounted */
	int	flags;		/* flags */
	int	wsize;		/* write size in bytes */
	int	rsize;		/* read size in bytes */
	int	timeo;		/* initial timeout in .1 secs */
	int	retrans;	/* times to retry send */
	char	\(**hostname;	/* server's hostname */
	int	acregmin;	/* attr cache file min secs */
	int	acregmax;	/* attr cache file max secs */
	int	acdirmin;	/* attr cache dir min secs */
	int	acdirmax;	/* attr cache dir max secs */
	char	\(**netname;	/* server's netname */

};
.ft R
.TP 4
.B "rfs"
.ft B
struct rfs_args {
	char	\(**rmtfs	/* name of remote resource */
	struct token {
		int	t_id;		/* token id */
		char	t_uname[64];	/* domain.machine name */
	}	\(**token;	/* Identifier of remote machine */
};
.ft R
.fi
.RE
.SH SYSTEM V DESCRIPTION
.LP
.B mount(\|)
requests that a file system contained on the block special file
identified by
.I spec
be mounted on the directory identified by
.IR dir .
.I spec
and
.I dir
point to path names.
When
.B mount(\|)
succeeds, subsequent references to the file named by
.I dir
refer to the root directory on the mounted file system.
.LP
The
.SB M_RDONLY
bit of
.I rdonly
is used to control write permission on the mounted file system.
If the bit is set, writing is not allowed.  Otherwise, writing is
permitted according to the access permissions of individual files.
.SH RETURN VALUES
.LP
.B mount(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.
.SH ERRORS
.TP 20
.SM EACCES
Search permission is denied for a component of the path prefix of
.IR dir .
.TP
.SM EBUSY
Another process currently holds a reference to
.IR dir .
.TP
.SM EFAULT
.I dir
points outside the process's
allocated address space.
.TP
.SM EIO
The UFS file system has been tuned to use contiguous blocks that are larger
than the maximum block size than the device drivers can support.
.TP 
.SM ELOOP
Too many symbolic links were encountered in
translating the path name of
.IR dir .
.TP
.SM ENAMETOOLONG
The length of the path argument exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
(see
.BR sysconf (2V))
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENODEV
The file system type specified by
.I type
is not valid or is not configured into the system.
.TP
.SM ENOENT
A component of
.I dir
does not exist.
.TP
.SM ENOTDIR
The file named by
.I dir
is not a directory.
.TP
.SM EPERM
The caller is not the super-user.
.LP
For a 4.2 file system,
.B mount(\|)
fails when one of the following occurs:
.TP 20
.SM EACCES
Search permission is denied for a component of the path prefix of
.IR fspec .
.TP
.SM EFAULT
.I fspec
points outside the process's
allocated address space.
.TP
.SM EINVAL
The super block for the file system had a bad magic
number or an out of range block size.
.TP
.SM EIO
An I/O error occurred while reading from or writing to the file system.
.TP
.SM ELOOP
Too many symbolic links were encountered in
translating the path name of
.IR fspec .
.TP
.SM EMFILE
No space remains in the mount table.
.TP
.SM ENAMETOOLONG
The length of the path argument exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
(see
.BR sysconf (2V))
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENOENT
A component of
.I fspec
does not exist.
.TP
.SM ENOMEM
Not enough memory was available to read the cylinder
group information for the file system.
.TP
.SM ENOTBLK
.I fspec
is not a block device.
.TP
.SM ENOTDIR
A component of the path prefix of
.I fspec
is not a directory.
.TP
.SM ENXIO
The major device number of 
.I fspec
is out of range (this indicates no device driver exists
for the associated hardware).
.SH SYSTEM V ERRORS
.TP 20
.SM EBUSY
The device referred to by 
.I spec
is currently mounted.
.IP
There are no more mount table entries.
.TP
.SM ENOENT
The file referred to by
.I spec
or
.I dir
does not exist.
.TP
.SM ENOTBLK
.I spec
is not a block special device.
.TP
.SM ENOTDIR
A component of the path prefix of
.I dir
or
.I spec
is not a directory.
.TP
.SM ENXIO
The device referred to by
.I spec
does not exist.
.SH SEE ALSO
.BR unmount (2V),
.BR open (2V),
.BR lofs (4S),
.BR fstab (5),
.BR mount (8)
.SH BUGS
.LP
Some of the error codes need translation to more obvious messages.
