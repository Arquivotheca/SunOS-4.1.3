.\" @(#)rmdir.2v 1.1 92/07/30 SMI; from UCB 4.2
.TH RMDIR 2V "21 January 1990"
.SH NAME
rmdir \- remove a directory file
.SH SYNOPSIS
.nf
.ft B
int rmdir(path)
char *path;
.ft R
.fi
.IX  rmdir()  ""  "\fLrmdir()\fP \(em remove directory"
.IX  "file system"  "remove directory rmdir()"  ""  "remove directory \(em \fLrmdir()\fP"
.IX  "file system"  "erase directory rmdir()"  ""  "erase directory \(em \fLrmdir()\fP"
.IX  "file system"  "delete directory rmdir()"  ""  "delete directory \(em \fLrmdir()\fP"
.IX  directory  "remove rmdir()"  ""  "remove \(em \fLrmdir()\fP"
.IX  directory  "delete rmdir()"  ""  "delete \(em \fLrmdir()\fP"
.IX  directory  "erase rmdir()"  ""  "erase \(em \fLrmdir()\fP"
.IX  remove "directory \(em \fLrmdir()\fP"
.IX  delete "directory \(em \fLrmdir()\fP"
.IX  erase "directory \(em \fLrmdir()\fP"
.SH DESCRIPTION
.LP
.B rmdir(\|)
removes a directory file whose name is given by
.IR path .
The directory must not have any entries other than
.RB ` . '
and
.RB ` .\|. '.
The directory must not be the root directory or the
current directory of the calling process.
.LP
If the directory's link count becomes zero, and no process has the
directory open, the space occupied by the directory is freed and the directory
is no longer accessible.
If one or more processes have the directory open when the last
link is removed, the
.RB ` . '
and
.RB ` .\|. '.
entries, if present, are removed before
.B rmdir(\|)
returns and no new entries may be created in the directory, but the
directory is not removed until all references to the directory
have been closed.
.LP
Upon successful completion,
.B rmdir(\|)
marks for update the
.B st_ctime
and
.B st_mtime
fields of the parent directory.
.SH RETURN VALUES
.LP
.B rmdir(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.
.SH ERRORS
.TP 20
.SM EACCES
Search permission is denied for a component of the path prefix of
.IR path .
.TP
.SM EACCES
Write permission is denied for the parent directory of the
directory to be removed.
.TP
.SM EBUSY
The directory to be removed is the mount point for a mounted file system,
or is being used by another process.
.TP
.SM EFAULT
.I path
points outside the process's allocated address space.
.TP
.SM EINVAL
The directory referred to by
.I path
is the current directory, 
.RB ` . '.
.TP
.SM EIO
An I/O error occurred while reading from or writing to the file system.
.TP
.SM ELOOP
Too many symbolic links were encountered in translating
.IR path .
.TP
.SM ENAMETOOLONG
The length of the path argument exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENOENT
The directory referred to by
.I path
does not exist.
.TP
.SM ENOTDIR
A component of the path prefix of
.I path
is not a directory.
.TP
.SM ENOTDIR
The file referred to by
.I path
is not a directory.
.TP
.SM ENOTEMPTY
The directory referred to by
.I path
contains files other than
.RB ` . '
and
.RB ` .\|. '.
.TP
.SM EROFS
The directory to be removed resides on a read-only file system.
.SH SYSTEM V ERRORS
.LP
In addition to the above, the following may also occur:
.TP 20
.SM ENOENT
.I path
points to a null pathname.
.SH "SEE ALSO"
.BR mkdir (2V),
.BR unlink (2V)
