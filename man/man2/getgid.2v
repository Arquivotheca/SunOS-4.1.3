.\" @(#)getgid.2v 1.1 92/07/30 SMI; from UCB 4.2
.TH GETGID 2V "21 January 1990"
.SH NAME
getgid, getegid \- get group identity
.SH SYNOPSIS
.nf
.ft B
int getgid(\|)
.ft
.fi
.LP
.nf
.ft B
int getegid(\|)
.ft
.fi
.SH SYSTEM V SYNOPSIS
.nf
.ft B
#include <sys/types.h>
.ft
.fi
.LP
.nf
.ft B
gid_t getgid(\|)
.ft
.fi
.LP
.nf
.ft B
gid_t getegid(\|)
.ft
.fi
.IX  getgid()  ""  "\fLgetgid()\fP \(em get group ID"
.IX  "processes and protection"  getgid()  ""  \fLgetgid()\fP
.IX  getegid()  ""  "\fLgetegid()\fP \(em get effective group ID"
.IX  "processes and protection"  getegid()  ""  \fLgetegid()\fP
.IX  "group ID"  get "" "get \(em \fLgetgid()\fP"
.IX  "group ID"  "get effective" "" "get effective \(em \fLgetegid()\fP"
.IX  "effective group ID"  get "" "get \(em \fLgetegid()\fP"
.SH DESCRIPTION
.LP
.B getgid(\|)
returns the real group
.SM ID
of the current process.
.B getegid(\|)
returns the effective group
.SM ID
of the current process.
.LP
The
.SM GID
is specified at login time
by the group field in the
.B /etc/passwd
database
(see
.BR passwd (5)).
.LP
The effective
.SM GID
is more transient, and determines
additional access permission during execution of a
set\s-1GID\s0 process, and it is for such processes
that
.B getegid(\|)
is most useful.
.SH "SEE ALSO"
.BR getuid (2V),
.BR setregid (2),
.BR setuid (3V)
