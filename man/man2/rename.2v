.\" @(#)rename.2v 1.1 92/07/30 SMI; from UCB 4.3
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.TH RENAME 2V "21 January 1990"
.SH NAME
rename \- change the name of a file
.SH SYNOPSIS
.nf
.ft B
int rename(path1, path2)
char *path1, *path2;
.ft R
.fi
.IX  "rename file"  ""  "rename file \(em \fLrename()\fP"
.IX  "file system"  "rename file"  ""  "rename file \(em \fLrename()\fP"
.IX  "change" "file name \(em \fLrename()\fP"
.IX  "filename, change \(em \fLrename()\fP"
.SH DESCRIPTION
.LP
.B rename(\|)
renames the link named
.I path1
as
.IR path2 .
If
.I path2
exists, then it is first removed.
If
.I path2
refers to a directory,
it must be an empty directory,
and must not include
.I path1
in its path prefix.
Both
.I path1
and
.I path2
must be of the same type (that is, both directories or both
non-directories), and must reside on the same file system.
Write access permission is required for both the directory containing
.I path1
and the directory containing
.IR path2 .
If a rename request relocates a
directory in the hierarchy, write permission in the directory to
be moved is needed, since its entry for the parent directory
.RB ( .\|. )
must be updated.
.LP
.B rename(\|)
guarantees that an instance of
.I path2
will always exist, even if the system should crash in
the middle of the operation.
.LP
If the final component of
.I path1
is a symbolic link, the symbolic link is renamed,
not the file or directory to which it points.
.LP
If the file referred to by
.I path2
exists and the file's link count becomes zero when it is removed
and no process has the file open, the space occupied by the file is
freed, and the file is no longer accessible.  If one or more processes
have the file open when the last link is removed, the link is removed
before
.B rename(\|)
returns, but the file's contents are not removed until all references
to the file have been closed.
.LP
Upon successful completion,
.B rename(\|)
marks for update the
.B st_ctime
and
.B st_mtime
fields of the parent directory of each file.
.SH RETURN VALUES
.LP
.B rename(\|)
returns:
.TP
0
on success.
.TP
\-1
on failure and sets
.B errno
to indicate the error.
.SH ERRORS
.LP
.B rename(\|)
will fail and neither
.I path1
nor
.I path2
will be affected if:
.TP 20
.SM EACCES
Write access is denied for either
.I path1
or
.IR path2 .
.IP
A component of the path prefix of either
.I path1
or
.I path2
denies search permission.
.IP
The requested rename requires writing in a directory with access permissions
that deny write permission.
.TP
.SM EBUSY
.I path2
is a directory and is the mount point for a mounted file system.
.TP
.SM EDQUOT
The directory in which the entry for the new name
is being placed cannot be extended because the user's
quota of disk blocks on the file system containing
the directory has been exhausted.
.TP
.SM EFAULT
Either or both of
.I path1
or
.I path2
point outside the process's allocated address space.
.TP
.SM EINVAL
.I path1
is a parent directory of
.IR path2 .
.IP
An attempt was made to rename
.RB ` . '
or
.RB ` .\|. '.
.TP
.SM EIO
An I/O error occurred while reading from or writing to the file system.
.TP
.SM EISDIR
.I path2
points to a directory and
.I path1
points to a file that is not a directory.
.TP
.SM ELOOP
Too many symbolic links were encountered while translating either
.I path1
or
.IR path2 .
.br
.ne 4
.TP
.SM ENAMETOOLONG
The length of either path argument exceeds
.SM {PATH_MAX}\s0.
.IP
A pathname component is longer than
.SM {NAME_MAX}
while
.SM {_POSIX_NO_TRUNC}
is in effect
(see
.BR pathconf (2V)).
.TP
.SM ENOENT
A component of the path prefix of either
.I path1
or
.I path2
does not exist.
.IP
The file named by
.I path1
does not exist.
.TP
.SM ENOSPC
The directory in which the entry for the new name
is being placed cannot be extended because there
is no space left on the file system containing the directory.
.TP
.SM ENOTDIR
A component of the path prefix of either
.I path1
or
.I path2
is not a directory.
.IP
.I path1
names a directory and
.I path2
names a nondirectory file.
.TP
.SM ENOTEMPTY
.I path2
is a directory and is not empty.
.TP
.SM EROFS
The requested rename requires writing in a directory on a read-only file
system.
.TP
.SM EXDEV
The link named by
.I path2
and the file named by
.I path1
are on different logical devices (file systems).
.SH SYSTEM V ERRORS
.LP
In addition to the above, the following may also occur:
.TP 20
.SM ENOENT
.I path1
or
.I path2
points to an empty string.
.SH "SEE ALSO"
.BR open (2V)
.SH WARNINGS
.LP
The system can deadlock if a loop in the file system graph is present.
This loop takes the form of an entry in directory
.BR a ,
say
.BR a/file1 ,
being a hard link to directory
.BR b ,
and an entry in directory
.BR b ,
say
.BR b/file2 ,
being a hard link to directory
.BR a .
When such a loop exists and two separate processes attempt to
perform
.RB ` "rename a/file1 b/file2" '
and
.RB ` "rename b/file2 a/file1" ',
respectively, the system may deadlock attempting to lock
both directories for modification.  Hard links to directories should not be
used.
System administrators should use symbolic links instead.
