/*	@(#)llib-lposix 1.1 92/07/30 SMI */
/*LINTLIBRARY*/
#define	_POSIX_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
#include <dirent.h>
#include <fcntl.h>
#include <grp.h>
#include <pwd.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/utsname.h>
#include <sys/wait.h>
#include <termios.h>
#include <time.h>
#include <utime.h>
#include <math.h>
#include <string.h>
#include <time.h>

#undef	clearerr
#undef	feof
#undef	ferror
#undef	getc
#undef	getchar
#undef	putc
#undef	putchar
#undef assert
#undef isalnum
#undef isalpha
#undef isascii

/*
 * This consists of every function that is defined in the identifier index
 * of POSIX.1-1988.  
 */
int	errno;
char	*environ[];
FILE	_iob[3];
char	*tzname[];
int	daytime, timezone;

void	_exit(s) {}
void	abort() { }
int	abs(i) { return (i); }
int	access(f, m) char *f; { return (m); }
double	acos(x) double x; { return (x); }
unsigned	alarm(s) unsigned s; { return (s); }
char*	asctime(t) struct tm *t; { static char *x; return (x); }
double	asin(x) double x; { return (x); }
void	assert(p) {}
double	atan(x) double x; { return (x); }
double	atan2(x) double x; { return (x); }
double	atof(s) char *s; { return (0.0); }
int	atoi(s) char *s; { return (0); }
long	atol(s) char *s; { return (0L); }
void*	bsearch(k, b, n, w, c) void *k, *b; size_t n, w; int (*c) (); { return (k); }
void*	calloc(n, e) size_t n, e; { static void *x; return (x); }
double	ceil(x) double x; { return (x); }
speed_t	cfgetispeed(t) struct termios *t; { static speed_t x; return (x); }
speed_t	cfgetospeed(t) struct termios *t; { static speed_t x; return (x); }
int	cfsetispeed(t, s) struct termios *t; speed_t s; { return (0); }
int	cfsetospeed(t, s) struct termios *t; speed_t s; { return (0); }
int	chdir(s) char *s; { return (0); }
int	chmod(s, m) char *s; mode_t m; { return (0); }
int	chown(s, o, g) char *s; uid_t o; gid_t g; { return (o); }
void	clearerr(f) FILE *f; { }
int	close(f) { return (0); }
int	closedir(d) DIR *d; { return(0); }
double	cos(x) double x; { return (x); }
double	cosh(x) double x; { return (x); }
int	creat(s, m) char *s; { return (m); }
char*	ctermid(s) char *s; { return (s); }
char*	ctime(t) struct tm *t; { return(""); }
char*	cuserid(s) char *s; { return (s); }
int	dup(f) { return (f); }
int	dup2(f1, f2) { return (f2); }
	/*VARARGS2*/
int	execl(f, a) char *f, *a; { return (0); }
	/*VARARGS3*/
int	execle(f, a, e) char *f, *a, *e[]; { return (0); }
	/*VARARGS2*/
int	execlp(f, a) char *f, *a; { return (0); }
int	execv(s, v) char *s, *v[]; { return (0); }
int	execve(f, a, e) char *f, *a[], *e[]; { return (0); }
int	execvp(s, v) char *s, *v[]; { return (0); }
void	exit(s) { }
double	exp(x) double x; { return (x); }
double	fabs(x) double x; { return (x); }
int	fclose(f) FILE *f; { return (0); }
	/*VARARGS2*/
int	fcntl(f, c, a) { return (f); }
FILE*	fdopen(f, t) char *t; { return (stdin); }
int	feof(f) FILE *f; { return (0); }
int	ferror(f) FILE *f; { return (0); }
int	fflush(f) FILE *f; { return (0); }
int	fgetc(f) FILE *f; { return (0); }
char*	fgets(s, n, f) char *s; FILE *f; { return (s); }
int	fileno(f) FILE *f; { static int fd; return (fd); }
double	floor(x) double x; { return (x); }
double	fmod(x, y) double x, y; { return (x); }
FILE*	fopen(f, t) char *f, *t; { return (stdin); }
pid_t	fork() { static pid_t x; return (x); }
long	fpathconf(f, n) char *n; { static long x; return (x); }
	/*VARARGS2 PRINTFLIKE2*/
int	fprintf(f, s) FILE *f; char *s; { return (0); }
int	fputc(c, f) FILE *f; { return (c); }
int	fputs(s, f) char *s; FILE *f; { return (0); }
size_t	fread(b, s, n, f) void *b; size_t s, n; FILE *f; { return (n); }
void	free(s) void *s; { }
FILE*	freopen(f, t, s) char *f, *t; FILE *s; { return (s); }
double	frexp(x, e) double x; int *e; { return (x); }
	/*VARARGS2 SCANFLIKE2*/
int	fscanf(f, s) FILE *f; char *s; { return (0); }
int	fseek(f, o, p) FILE *f; long o; { return (0); }
int	fstat(f, b) struct stat *b; { return (0); }
long	ftell(f) FILE *f; { static long p; return (p); }
size_t	fwrite(b, s, n, f) char *b; size_t s, n; FILE *f; { return (n); }
int	getc(f) FILE *f; { return (0); }
int	getchar() { return (0); }
char*	getcwd(b, s) char *b; { return (b); }
gid_t	getegid() { static gid_t x; return (x); }
char*	getenv(n) char *n; { return (n); }
uid_t	geteuid() { static uid_t x; return (x); }
gid_t	getgid() { static gid_t x; return (x); }
struct group*	getgrgid(g) gid_t g; { static struct group x; return (&x); }
struct group*	getgrnam(n) char *n; { static struct group x; return (&x); }
int	getgroups(n, g) gid_t *g; { return (n); }
char*	getlogin() { static char *x; return (x); }
pid_t	getpgrp() { return (0); }
pid_t	getpid() { return (0); }
pid_t	getppid() { return (0); }
struct passwd*	getpwnam(n) char *n; { static struct passwd x; return (&x); }
struct passwd*	getpwuid(u) uid_t u; { static struct passwd x; return (&x); }
char*	gets(s) char *s; { return (s); }
uid_t	getuid() { static uid_t x; return (x); }
struct tm*	gmtime(t) struct tm *t; { return(t); }
int	isalnum(c) { return (c); }
int	isalpha(c) { return (c); }
int	isatty(f) { return (1); }
int	iscntrl(c) { return (c); }
int	isdigit(c) { return (c); }
int	isgraph(c) { return (c); }
int	islower(c) { return (c); }
int	isprint(c) { return (c); }
int	ispunct(c) { return (c); }
int	isspace(c) { return (c); }
int	isupper(c) { return (c); }
int	isxdigit(c) { return (c); }
int	kill(i, s) pid_t i; { return (s); }
double	ldexp(v, e) double v; { return (v); }
int	link(a, b) char *a, *b; { return (0); }
struct tm*	localtime(t) struct tm *t; { return(t); }
double	log(x) double x; { return (x); }
double	log10(x) double x; { return (x); }
void	longjmp(e, v) jmp_buf e; { }
off_t	lseek(f, o, w) off_t o; { return (o); }
void*	malloc(s) size_t s; { static void *x; return (x); }
int	mkdir(p, m) char *p; mode_t m; { return (0); }
int	mkfifo(p, m) char *p; mode_t m; { return (0); }
time_t	mktime(t) struct tm *t; { static time_t x; return (x); }
double	modf(v, i) double v, *i; { return (v); }
	/*VARARGS2*/
int	open(f, o, m) char *f; { return (o); }
DIR*	opendir(f) char *f; { return (DIR *)0; }
long	pathconf(p, n) char *p; { static long x; return (x); }
int	pause() { return (0); }
void	perror(s) char *s; {}
int	pipe(f) int f[2]; { return (0); }
double	pow(x, y) double x, y; { return (x); }
	/*VARARGS1 PRINTFLIKE1*/
int	printf(s) char *s; { return (0); }
int	putc(c, f) FILE *f; { return (c); }
int	putchar(c) { return (c); }
int	puts(s) char *s; { return (0); }
void	qsort(b, n, w, c) void *b; size_t n, w; int (*c) (); { }
int	rand() { return (0); }
int	read(f, b, n) char *b; unsigned n; { return (f); }
struct dirent*	readdir(d) DIR *d; { return (struct dirent *)0; }
void*	realloc(s, n) void *s; size_t n; { return (s); }
int	remove(f) char *f; { return (0); }
int	rename(f, t) char *f, *t; { return (0); }
void	rewind(f) FILE *f; { }
void	rewinddir(dirp) DIR *dirp; {}
int	rmdir(p) char *p; { return (0); }
	/*VARARGS1 SCANFLIKE1*/
int	scanf(s) char *s; { return (0); }
void	setbuf(f, b) FILE *f; char *b; { }
int	setgid(g) gid_t g; { return (0); }
int	setjmp(e) jmp_buf e; { return (0); } 
char*	setlocale(category, locale) char *locale; {return(locale);}
int	setpgid(p, g) pid_t p, g; { return (0); }
pid_t	setsid() { static pid_t p; return (p); }
int	setuid(u) uid_t u; { return (0); }
int	sigaction(s, a, o) struct sigaction *a, *o; { return (0); }
int	sigaddset(s, i) sigset_t *s; { return (0); }
int	sigdelset(s, i) sigset_t *s; { return (0); }
int	sigemptyset(s) sigset_t *s; { return (0); }
int	sigfillset(s) sigset_t *s; { return (0); }
int	sigismember(s, i) sigset_t *s; { return (1); }
void	siglongjmp(e, v) sigjmp_buf e; {}
int	sigpending(s) sigset_t *s; { return (0); }
int	sigprocmask(h, s, o) sigset_t *s, *o; { return (0); }
int	sigsetjmp(e, s) sigjmp_buf e; { return (0); }
int	sigsuspend(s) sigset_t *s; { return (0); }
double	sin(x) double x; { return (x); }
double	sinh(x) double x; { return (x); }
unsigned	sleep(n) unsigned n; { return (0); }
	/*VARARGS2 PRINTFLIKE2*/
int	sprintf(p, s) char *p, *s; { return (0); }
double	sqrt(x) double x; { return (x); }
void	srand(s) unsigned s; { }
	/*VARARGS2 SCANFLIKE2*/
int	sscanf(p, s) char *p, *s; { return (0); }
int	stat(s, b) char *s; struct stat *b; { return (0); }
char*	strcat(a, b) char *a, *b; { return (a); }
char*	strchr(a, b) char *a; { return (a); }
int	strcmp(a, b) char *a, *b; { return (0); }
char*	strcpy(a, b) char *a, *b; { return (a); }
size_t	strcspn(a, b) char *a, *b; { return ((size_t) 0); }
size_t	strftime(s, m, f, t) char *s, *f; size_t m; struct tm *t; { return(m); }
size_t	strlen(s) char *s; { return (0); }
char*	strncat(a, b, n) char *a, *b; size_t n; { return (a); }
int	strncmp(a, b, n) char *a, *b; size_t n; { return (0); }
char*	strncpy(a, b, n) char *a, *b; size_t n; { return (a); }
char*	strpbrk(a, b) char *a, *b; { return (a); }
char*	strrchr(a, b) char *a; { return (a); }
size_t	strspn(a, b) char *a, *b; { return (0); }
char*	strstr(a, b) char *a, *b; { return (a); }
char*	strtok(a, b) char *a, *b; { return (a); }
long	sysconf(n) { static long x; return (x); }
double	tan(x) double x; { return (x); }
double	tanh(x) double x; { return (x); }
int	tcdrain(f) { return (0); }
int	tcflow(f, a) { return (0); }
int	tcflush(f, q) { return (0); }
int	tcgetattr(f, t) struct termios *t; { return (0); }
pid_t	tcgetpgrp(f) { static pid_t p; return (p); }
int	tcsendbreak(f, d) { return (0); }
int	tcsetattr(f, o, t) struct termios *t; { return (0); }
int	tcsetpgrp(f, p) pid_t p; { return (0); }
time_t	time(t) time_t *t; { return (*t); }
clock_t	times(b) struct tms *b; { static clock_t x; return (x); }
FILE*	tmpfile() { return (stdin); }
char*	tmpnam(s) char *s; { return (s); }
int	tolower(i) { return (i); }
int	toupper(i) { return (i); }
char*	ttyname(f) { return (""); }
void	tzset() {}
mode_t	umask(c) mode_t c; { return (c); }
int	uname(n) struct utsname *n; { return (0); }
int	ungetc(c, f) FILE *f; { return (c); }
int	unlink(s) char *s; { return (0); }
int	utime(f, t) char *f; struct utimbuf *t; { return (0); }
pid_t	wait(s) int *s; { static pid_t p; return (p); }
pid_t	waitpid(p, s, o) pid_t p; int *s; { return (p); }
int	write(f, b, n) char *b; unsigned n; { return (f); }
