/*	@(#)llib-lsunwindow	1.1	92/07/30	SMI	*/

/*
 * Copyright (c) 1983 by Sun Microsystems, Inc.
 */
/* LINTLIBRARY */
/* For libsunwindow.a */
#include <sunwindow/window_hs.h>

int     pixwindebug;
struct  pixwin *
pw_open(windowfd) int     windowfd; { return((struct pixwin *)0); }
pw_close(pw) struct  pixwin *pw; { return; }
pw_setcmsname(pw, cmsname) struct  pixwin *pw; char *cmsname; { ; }
pw_getcmsname(pw, cmsname) struct  pixwin *pw; char *cmsname; { ; }
pw_blackonwhite(pw, first, last)
	struct pixwin *pw; int first, last; { ; }
pw_whiteonblack(pw, first, last)
	struct pixwin *pw; int first, last; { ; }
pw_reversevideo(pw, first, last)
	struct pixwin *pw; int first, last; { ; }
pw_preparesurface(pw, rect) struct  pixwin *pw; struct rect *rect; { ; }
pw_cyclecolormap(pw, cycles, begin, length)
	struct  pixwin *pw; int cycles, begin, length; { ; }
pw_exposed(pw) struct  pixwin *pw; { return; }
pw_damaged(pw) struct  pixwin *pw; { return; }
pw_donedamaged(pw) struct  pixwin *pw; { return; }
_pw_setclippers(pw, screenrect)
	struct  pixwin *pw; struct  rect *screenrect; { ; }
win_getscreenposition(windowfd, x, y) int     windowfd; int     *x, *y; { ; }
pw_replrop(pw, xw, yw, width, height, op, pr, xr, yr)
        struct  pixwin *pw; int     op, xw, yw, width, height;
        struct  pixrect *pr; int     xr, yr; { return; }
pw_polygon_2(pw, dx, dy, nbds, npts, vlist, op, spr, sx, sy)
	struct pixwin *pw; int dx, dy; int nbds; int npts[];
	struct pr_pos *vlist; int op; struct pixrect *spr; int sx, sy; {;}
pw_traprop(pw, dx, dy, trap, op, spr, sx, sy)
	struct pixwin *pw; int dx, dy; struct pr_trap trap; int op;
	struct pixrect *spr; int sx, sy; {;}
PIXFONT *pf_sys;
pw_char(pw, xw, yw, op, pixfont, c)
        struct  pixwin *pw; int     op, xw, yw; char    c;
        struct  pixfont *pixfont; { ; }
pw_text(pw, xbasew, ybasew, op, pixfont, s)
        struct  pixwin *pw; int     op, xbasew, ybasew; char    *s;
        struct  pixfont *pixfont; { return; }
pw_ttext(pw, xbasew, ybasew, op, pixfont, s)
        struct  pixwin *pw; int     op, xbasew, ybasew; char    *s;
        struct  pixfont *pixfont; { return; }
PIXFONT * pw_pfsysopen() { return((PIXFONT *)0); }
pw_pfsysclose() { ; }
rect_intersection(r1, r2, r) struct rect *r1, *r2, *r; { return; }
bool	rect_clipvector(r, x1arg, y1arg, x2arg, y2arg)
        struct rect *r; int *x1arg, *y1arg, *x2arg, *y2arg; { return(FALSE); }
bool	rect_order(r1, r2, sortorder)
	struct  rect *r1, *r2; int     sortorder; { return(FALSE); }
struct  rect rect_bounding(r1, r2)
	struct rect *r1, *r2; { struct rect r; return(r); } 
bool	rl_includespoint(rl, x, y)
	struct rectlist *rl; coord   x, y; { return (FALSE); }
rl_intersection(rl1, rl2, rl) struct rectlist *rl1, *rl2, *rl; { ; }
rl_sort(rl1, rl, sortorder) struct rectlist *rl1, *rl; int     sortorder; { ; }
rl_union(rl1, rl2, rl) struct rectlist *rl1, *rl2, *rl; { ; }
rl_difference(rl1, rl2, rl) struct rectlist *rl1, *rl2, *rl; { ; }
bool	rl_empty(rl) struct rectlist *rl; { return (TRUE); }
bool	rl_equal(rl1, rl2) struct rectlist *rl1, *rl2; { return (FALSE); }
bool	rl_equalrect(r, rl)
	struct rect *r; struct rectlist *rl; { return (FALSE); }
bool	rl_boundintersectsrect(r, rl)
        struct rect *r; struct rectlist *rl; { return (FALSE); }
bool	rl_rectintersects(r, rl)
        struct rect *r; struct rectlist *rl; { return (FALSE); }
rl_rectintersection(r, rl1, rl)
        struct rect *r; struct rectlist *rl1, *rl; { ; }
rl_rectunion(r, rl1, rl) struct rect *r; struct rectlist *rl1, *rl; { ; }
rl_rectdifference(r, rl1, rl) struct rect *r; struct rectlist *rl1, *rl; { ; }
rl_initwithrect(r, rl) struct rect *r; struct  rectlist *rl; { ; }
rl_copy(rl1, rl) struct rectlist *rl1, *rl; { ; }
rl_free(rl) struct rectlist *rl; { ; }
rl_coalesce(rl) struct rectlist *rl; { ; }
rl_normalize(rl) struct rectlist *rl; { ; }
rl_print(rl, tag) struct  rectlist *rl; char *tag; { ; }
setenv(name, value) char *name, *value; { ; }
unsetenv(name) char *name; { ; }
win_setmouseposition(windowfd, x, y) int     windowfd; short   x, y; { return; }
win_setcursor(windowfd, cursor)
	int	windowfd; struct  cursor *cursor; { return; }
win_getcursor(windowfd, cursor) int     windowfd; struct  cursor *cursor; { ; }
int	win_findintersect(windowfd, x, y)
	int     windowfd; short   x, y; { return(0); }
we_setparentwindow(windevname) char    *windevname; { ; }
int	we_getparentwindow(windevname) char    *windevname; { return(0); }
we_setinitdata(initialrect, initialsavedrect, iconic)
        struct  rect *initialrect, *initialsavedrect; int     iconic; { ; }
int	we_getinitdata(initialrect, initialsavedrect, iconic)
        struct  rect *initialrect, *initialsavedrect; int     *iconic;
	{ return(0); }
we_clearinitdata() { ; }
we_setgfxwindow(windevname) char    *windevname; { ; }
int	we_getgfxwindow(windevname) char    *windevname; { return(0); }
we_setmywindow(windevname) char    *windevname; { }
win_getrect(windowfd, rect) int     windowfd; struct  rect *rect; { return; }
win_setrect(windowfd, rect) int     windowfd; struct  rect *rect; { return; }
win_setsavedrect(windowfd, rect) int windowfd; struct  rect *rect; { return; }
win_getsavedrect(windowfd, rect) int windowfd; struct  rect *rect; { return; }
win_getsize(windowfd, rect) int     windowfd; struct  rect *rect; { return; }
coord	win_getheight(windowfd) int     windowfd; { ; }
coord	win_getwidth(windowfd) int     windowfd; { ; }
int     win_lockdatadebug;
int     win_grabiodebug;
win_lockdata(windowfd) int     windowfd; { return; }
win_unlockdata(windowfd) int     windowfd; { return; }
win_computeclipping(windowfd) int     windowfd; { return; }
win_partialrepair(windowfd, rectok)
	int     windowfd; struct  rect *rectok; { return; }
win_grabio(windowfd) int     windowfd; { return; }
win_releaseio(windowfd) int     windowfd; { return; }
win_getinputmask(windowfd, im, nextwindownumber)
        int     windowfd, *nextwindownumber; struct  inputmask *im; { return; }
win_setinputmask(windowfd, im_set, im_flush, nextwindownumber)
        int     windowfd, nextwindownumber;
        struct  inputmask *im_set, *im_flush;
	{ return; }
input_imnull(im) struct  inputmask *im; { ; }
input_imall(im) struct  inputmask *im; { ; }
input_readevent(windowfd, event)
	int     windowfd; struct  inputevent *event; { return(0); }
int	win_getuserflags(windowfd) int     windowfd; { return(0); }
win_setuserflags(windowfd, flags) int     windowfd; int     flags; { return; }
int	win_getowner(windowfd) int     windowfd; { return(0); }
win_setowner(windowfd, pid) int     windowfd; int     pid; { return; }
werror(errnum, winopnum) int     errnum, winopnum; { return; }
int	(*win_errorhandler(win_errornew))()
	int     (*win_errornew)();
	{ /*NOSTRICT*/ return(0); }
win_errordefault(errnum, winopnum) int     errnum, winopnum; { ; }
win_setuserflag(windowfd, flag, value)
        int     windowfd; int     flag; bool    value; { return(0); }
int	win_screennew(screen)
        struct  screen *screen; { return(0); }
win_initscreenfromargv(screen, argv)
        struct  screen *screen; char **argv; { return; }
win_screenget(windowfd, screen)
        int     windowfd; struct  screen *screen; { return; }
int	win_setms(windowfd, screen)
        int     windowfd; struct  screen *screen; { return(0); }
int	win_setkbd(windowfd, screen)
        int     windowfd; struct  screen *screen; { return(0); }
win_screendestroy(windowfd) int     windowfd; { return; }
win_setscreenpositions(windowfd, neighbors)
        int     windowfd; int     neighbors[SCR_POSITIONS]; { return; }
win_getscreenpositions(windowfd, neighbors)
        int     windowfd; int     neighbors[SCR_POSITIONS]; { return; }
int	win_getlink(windowfd, linkname) int windowfd, linkname; { return(0); }
win_setlink(windowfd, linkname, number)
        int     windowfd, linkname, number; { return; }
win_insert(windowfd) int     windowfd; { return; }
win_remove(windowfd) int     windowfd; {      return; }
int	win_nextfree(windowfd) int     windowfd; { return(0); }
int	win_isblanket(windowfd) int     windowfd; { return(0); }
int	win_insertblanket(windowfd, parentfd) int     windowfd, parentfd;
	{ return(0); }
win_removeblanket(windowfd) int     windowfd; { return; }
win_numbertoname(number, name) int     number; char    *name; { return; }
int	win_nametonumber(name) char    *name; { return(0); }
win_fdtoname(windowfd, name) int     windowfd; char    *name; { return; }
int	win_fdtonumber(windowfd) int     windowfd; { return(0); }
int	win_getnewwindow() { return(0); }
int	we_getmywindow(windevname) char    *windevname; { return(0); }

