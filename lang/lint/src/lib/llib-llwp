/*      @(#)llib-llwp  1.1     92/07/30     SMI     */

/*
 * Copyright (c) 1987 by Sun Microsystems, Inc.
 */
/* LINTLIBRARY */
/* For liblwp.a */

#include <lwp/lwp.h>
#include <lwp/lwperror.h>
#include <lwp/check.h>
#include <lwp/lwpmachdep.h>
#include <lwp/stackdep.h>

int	lwp_self(tid) thread_t *tid; { return (0); }
int	lwp_getstate(tid, statvec) thread_t tid; statvec_t *statvec; { return (0); }
int	lwp_getregs(tid, machstate) thread_t tid; machstate_t *machstate; { return (0); }
int	lwp_setregs(tid, machstate) thread_t tid; machstate_t *machstate; { return (0); }
int	lwp_ping(tid) thread_t tid; { return (0); }
/* VARARGS6 */
int	lwp_create(tid, pc, prio, flags, stack, nargs) thread_t *tid; void (*pc)(); int prio; int flags; stkalign_t *stack; int nargs; { return (0); }
int	lwp_destroy(tid) thread_t tid; { return (0); }
int	lwp_enumerate(vec, maxsize) thread_t vec[]; int maxsize; { return (0); }
void	pod_setexit(status) int status; {;}
int	pod_getexit() { return (0); }
void	pod_exit(status) int status; {;}
int	pod_setmaxpri(maxprio) int maxprio; { return (0); }
int	pod_getmaxpri() { return (0); }
int	pod_getmaxsize() { return (0); }
int	lwp_resched(prio) int prio; { return (0); }
int	lwp_setpri(tid, prio) thread_t tid; int prio; { return (0); }
int	lwp_sleep(timeout) struct timeval *timeout; { return (0); }
int	lwp_suspend(tid) thread_t tid; { return (0); }
int	lwp_resume(tid) thread_t tid; { return (0); }
int	lwp_yield(tid) thread_t tid; { return (0); }
int	lwp_join(tid) thread_t tid; { return (0); }
lwp_err_t	lwp_geterr() { return (LE_NOERROR); }
void	lwp_perror(s) char *s;  { ; }
char	**lwp_errstr() { return ((char **)0); }
int	msg_send(tid, argbuf, argsize, resbuf, ressize) thread_t tid; caddr_t argbuf; int argsize; caddr_t resbuf; int ressize; { return (0); }
int	msg_recv(tid, argbuf, argsize, resbuf, ressize, timeout) thread_t *tid; caddr_t *argbuf; int *argsize; caddr_t *resbuf; int *ressize; struct timeval *timeout; { return (0); }
int	msg_reply(tid) thread_t tid; { return (0); }
int	msg_enumsend(vec, maxsize) thread_t vec[]; int maxsize; { return (0); }
int	msg_enumrecv(vec, maxsize) thread_t vec[]; int maxsize; { return (0); }
int	agt_create(agt, event, memory) thread_t *agt; int event; caddr_t memory; { return (0); }
int	agt_enumerate(vec, maxsize) thread_t vec[]; int maxsize; { return (0); }
int	agt_trap(event) int event; { return (0); }
int	mon_create(mid) mon_t *mid; { return (0); }
int	mon_destroy(mid) mon_t mid; { return (0); }
int	mon_enter(mid) mon_t mid; { return (0); }
int	mon_exit(mid) mon_t mid; { return (0); }
int	mon_enumerate(vec, maxsize) mon_t vec[]; int maxsize; { return (0); }
int	mon_waiters (mid, owner, vec, maxsize) mon_t mid; thread_t *owner; thread_t vec[]; int maxsize; { return (0); }
int	mon_cond_enter(mid) mon_t mid; { return (0); }
int	mon_break(mid) mon_t mid; { return (0); }
int	cv_create(cv, mid) cv_t *cv; mon_t mid; { return (0); }
int	cv_destroy(cv) cv_t cv; { return (0); }
int	cv_wait(cv) cv_t cv; { return (0); }
int	cv_notify(cv) cv_t cv; { return (0); }
int	cv_send(cv, tid) cv_t cv; thread_t tid; { return (0); }
int	cv_broadcast(cv) cv_t cv; { return (0); }
int	cv_enumerate(vec, maxsize) cv_t vec[]; int maxsize; { return (0); }
int	cv_waiters(cv, vec, maxsize) cv_t cv; thread_t vec[]; int maxsize; { return (0); }
int	exc_handle(pattern, func, arg) int pattern; caddr_t (*func)(); caddr_t arg; { return (0); }
int	exc_unhandle() { return (0); }
caddr_t	(*exc_bound(pattern, arg))() int pattern; caddr_t *arg; { return (0); }
int	exc_notify(pattern) int pattern; { return (0); }
int	exc_raise(pattern) int pattern; { return (0); }
int	exc_on_exit(func, arg) void (*func)(); caddr_t arg; { return (0); }
int	exc_uniqpatt() { return (0); }
int	lwp_ctxinit(tid, cookie) thread_t tid; int cookie; { return (0); }
int	lwp_ctxset(save, restore, ctxsize, optimise) void (*save)(); void (*restore)(); unsigned int ctxsize; int optimise; { return (0); }
int	lwp_ctxmemget(mem, tid, ctx) caddr_t mem; thread_t tid; int ctx; { return (0);}
int	lwp_ctxmemset(mem, tid, ctx) caddr_t mem; thread_t tid; int ctx; { return (0);}
int	lwp_fpset(tid) thread_t tid; { return (0); }
int	lwp_libcset(tid) thread_t tid; { return (0); }
int	lwp_setstkcache(minsize, numstks) int minsize; int numstks; { return (0); }
stkalign_t	*lwp_newstk() { return ((stkalign_t *)0); }
int	lwp_stkcswset(tid, limit) thread_t tid; caddr_t limit; { return (0); }
int	lwp_checkstkset(tid, limit) thread_t tid; caddr_t limit; { return (0); }
