/*	@(#)llib-lsuntool	1.1	92/07/30	SMI	*/

/*
 * Copyright (c) 1986 by Sun Microsystems, Inc.
 */
/* LINTLIBRARY */
/* For libsuntool.a */
#include <stdio.h>
#include <suntool/tool_hs.h>
#include <suntool/msgsw.h>
#include <suntool/emptysw.h>
#include <suntool/selection.h>
#include <suntool/ttysw.h>
#include <suntool/gfxsw.h>
#include <suntool/fullscreen.h>
#include <suntool/menu.h>
#include <suntool/wmgr.h>
#include <suntool/panel.h>
#include <suntool/icon_load.h>

struct  msgsubwindow * msgsw_init(windowfd, string, font)
        int     windowfd; char    *string; struct  pixfont *font;
	{ return((struct  msgsubwindow *)0); }
msgsw_done(msgsw) struct  msgsubwindow *msgsw; { return; }
msgsw_handlesigwinch(msgsw) struct  msgsubwindow *msgsw; { return; }
msgsw_display(msgsw) struct  msgsubwindow *msgsw; { return; }
msgsw_setstring(msgsw, string) struct  msgsubwindow *msgsw; char    *string; { }
struct  toolsw *
	msgsw_createtoolsubwindow(tool, name, width, height, string, font)
        struct  tool *tool; char    *name; short   width, height;
        char    *string; struct  pixfont *font;
	{ return((struct  toolsw *)0); }
struct  emptysubwindow * esw_init(windowfd) int     windowfd;
	{ return((struct  emptysubwindow *)0); }
esw_done(esw) struct  emptysubwindow *esw; { }
esw_handlesigwinch(esw) struct  emptysubwindow *esw; { return; }
struct  toolsw * esw_createtoolsubwindow(tool, name, width, height)
        struct  tool *tool; char    *name; short   width, height;
	{ return((struct  toolsw *)0); }
struct  selection       selnull;
selection_set(sel, sel_write, sel_clear, windowfd)
        struct selection *sel; int (*sel_write)(), (*sel_clear)(), windowfd; { }
selection_get(sel_read, windowfd) int (*sel_read)(), windowfd; { }
selection_clear(windowfd) int     windowfd; { }
caddr_t ttysw_init(windowfd) int     windowfd;
	{ return((caddr_t)0); }
ttysw_becomeconsole(ttysw) caddr_t ttysw; { }
int	ttysw_fork(ttysw, argv, inputmask, outputmask, exceptmask)
        caddr_t ttysw; char    **argv;
        int     *inputmask, *outputmask, *exceptmask;
	{ return(0); }
ttysw_handlesigwinch(ttysw) caddr_t ttysw; { }
ttysw_selected(ttysw, ibits, obits, ebits, timer)
        caddr_t ttysw; int     *ibits, *obits, *ebits;
        struct  timeval **timer; { }
ttysw_done(ttysw) caddr_t ttysw; { }
struct  toolsw * ttysw_createtoolsubwindow(tool, name, width, height)
        struct  tool *tool; char    *name; short   width, height;
	{ return((struct  toolsw *)0); }
ttysw_saveparms(ttyfd) int     ttyfd; { }               
ttysw_restoreparms(ttyfd) int     ttyfd; { }
int	ttysw_output(ttysw, addr, len)
        caddr_t ttysw; char *addr; int len; {}
int	ttysw_input(ttysw, addr, len)
        caddr_t ttysw; char *addr; int len; {}
struct  toolsw * ttytlsw_createtoolsubwindow(tool, name, width, height)
        struct  tool *tool; char    *name; short   width, height;
	{ return((struct  toolsw *)0); }
ttytlsw_done(ttysw) caddr_t ttysw; { }
struct  gfxsubwindow * gfxsw_init(windowfd, argv) int windowfd; char    **argv;
	{ return((struct  gfxsubwindow *)0); }
gfxsw_handlesigwinch(gfx) struct  gfxsubwindow *gfx; { }
gfxsw_done(gfx) struct  gfxsubwindow *gfx; { return; }
struct  toolsw * gfxsw_createtoolsubwindow(tool, name, width, height, argv)
        struct  tool *tool; char    *name; short   width, height; char **argv;
	{ return((struct  toolsw *)0); }
gfxsw_getretained(gfx) struct  gfxsubwindow *gfx; { }
gfxsw_interpretesigwinch(gfx) struct  gfxsubwindow *gfx; { }
gfxsw_select(gfx, selected, ibits, obits, ebits, timer)
        struct  gfxsubwindow *gfx; int     (*selected)(), ibits, obits, ebits;
        struct  timeval *timer; { }
gfxsw_selected(tool, ibits, obits, ebits, timer)
        struct  tool *tool; int     *ibits, *obits, *ebits;
        struct  timeval **timer; { }
gfxsw_selectdone(gfx) struct  gfxsubwindow *gfx; { }
gfxsw_catchsigwinch() { }
gfxsw_catchsigtstp() { }
gfxsw_catchsigcont() { }
gfxsw_setinputmask(gfx, im_set, im_flush, nextwindownumber, usems, usekbd)
        struct  gfxsubwindow *gfx; int     nextwindownumber;
        struct  inputmask *im_set, *im_flush; int     usems, usekbd;
	{ }
gfxsw_inputinterrupts(gfx, ie)
        struct  gfxsubwindow *gfx; struct  inputevent *ie;
	{ return(0); }
gfxsw_notusingmouse(gfx) struct  gfxsubwindow *gfx; { }

int	cursor_confirm(fd)	int	fd; { return 0; }

struct  fullscreen * fullscreen_init(windowfd)
        int     windowfd; { return((struct fullscreen *)0); }
fullscreen_destroy(fs) struct  fullscreen *fs; { }
struct  menuitem * menu_display(menuptr, inputevent, iowindowfd)
        struct  menu **menuptr; struct  inputevent *inputevent; int iowindowfd;
	{ return((struct menuitem *)0); }
struct pixrect * save_bits(pixwin, r) struct pixwin *pixwin; struct rect  *r;
	{ return((struct pixrect *)0); }
restore_bits(pixwin, r, mpr)
	struct pixwin *pixwin; struct rect *r; struct pixrect *mpr; { }
menu_prompt(prompt, inputevent, iowindowfd)
        struct  prompt *prompt; struct  inputevent *inputevent; int iowindowfd;
	{ return; }
struct  tool * tool_create(name, flags, rect, icon)
        char    *name; short   flags; struct  rect *rect; struct  icon *icon;
	{ return((struct tool *)0); }
struct  toolsw * tool_createsubwindow(tool, name, width, height)
        struct  tool *tool; char    *name; short   width, height;
	{ return((struct toolsw *)0); } 
short	tool_stripeheight(tool) struct  tool *tool; { return(0); }
short	tool_borderwidth(tool) struct  tool *tool; { return(0); }
short	tool_subwindowspacing(tool) struct  tool *tool; { return(0); }
tool_destroy(tool) struct  tool *tool; { return; }
tool_destroysubwindow(tool, toolsw)
        struct  tool *tool; struct  toolsw *toolsw; { return; }
tool_selectedstd(tool, ibits, obits, ebits, timer)
        struct  tool *tool; int *ibits, *obits, *ebits; struct  timeval **timer;
	{ }
int	tool_moveboundary(tool, event)
	struct  tool *tool; struct  inputevent *event; { return(0); }
wmgr_dragboundary(feedbackfd, r, rconstrain, event, changewidth)
        int     feedbackfd; struct  rect  *r, *rconstrain;
        struct  inputevent *event; int     changewidth;
	{ return; }
tool_select(tool, waitprocessesdie)
        struct  tool *tool; int     waitprocessesdie; { }
tool_sigchld(tool) struct  tool *tool; { }
tool_sigwinch(tool) struct  tool *tool; { }
tool_handlesigwinchstd(tool) struct  tool *tool; { return; }
tool_display(tool) struct  tool *tool; { return; }
tool_done(tool) struct  tool *tool; { }
_tool_display(tool, swstoo) struct  tool *tool; bool    swstoo; { return; }
_tool_displaynormal(tool) struct  tool *tool; { return; }
_tool_subwindowshandlesigwinch(tool) struct  tool *tool; { return; }
_tool_displaydefaulticon(tool) struct  tool *tool; { return; }
_tool_displayicon(tool) struct  tool *tool; { return; }
/*VARARGS*/	/* Had to put i in front of args to shut up lint */
struct  tool *tool_make(i, args) int i; char *args;
	{ return((struct tool *)0); }
int	tool_parse_all(argc_ptr, argv, avlist_ptr, tool_name)
        int *argc_ptr; char **argv; char ***avlist_ptr; char *tool_name;
        {return(0);}
int	tool_parse_one(argc, argv, avlist_ptr, tool_name)
        int argc; char **argv; char ***avlist_ptr; char *tool_name; 
        {return(0);}
int	tool_headerheight(tool) struct tool *tool; {return(0);}
int	tool_heightfromlines(tool, y) struct tool *tool; int y; {return(0);}
int	tool_widthfromcolumns(tool, x) struct tool *tool; int x; {return(0);}
int	tool_linesfromheight(tool, y) struct tool *tool; int y; {return(0);}
int	tool_columnsfromwidth(tool, x) struct tool *tool; int x; {return(0);}
/* VARARGS2 */
int	tool_find_attribute(avlist, attr, v) char **avlist; int attr; char **v;
        {return(0);}
tool_free_attribute_list(avlist) char **avlist; { }
char *	tool_get_attribute(tool, attr) struct tool *tool; int attr;
	{return((char *)0);}
/* VARARGS1 */
int	tool_set_attributes(tool, args) struct tool *tool; char *args;
        {return(0);}
/* VARARGS1 */
tool_free_attribute(attr, v) int attr; char *v; { }
tool_usage(tool_name) char *tool_name; { }
tool_layoutsubwindows(tool) struct  tool *tool; { }
void	icon_display(icon, pixwin, x, y)
	struct icon *icon; struct pixwin *pixwin; int x, y; { }
formatstringtorect(pixwin, s, font, rect)
        struct  pixwin *pixwin; char    *s; struct  pixfont *font;
        struct  rect *rect;
	{ }
draw_box(pixwin, op, r, w, color)
        struct  pixwin *pixwin; int     op; struct rect *r;
        int    w; int     color; {}
struct  menu *wmgr_toolmenu;
wmgr_handletoolmenuitem(menu, mi, toolfd, rootfd)
        struct  menu *menu; struct  menuitem *mi; int     toolfd, rootfd;
	{ return(0); } 
void	wmgr_setupmenu(windowfd, rootfd) int     windowfd, rootfd; { return; }
void	wmgr_open(windowfd, rootfd) int     windowfd, rootfd; { return; }
void	wmgr_close(windowfd, rootfd) int     windowfd, rootfd; { return; }
void	wmgr_move(windowfd) int     windowfd; { return; }
void	wmgr_stretch(windowfd) int     windowfd; { return; }
void	wmgr_top(windowfd, rootfd) int     windowfd, rootfd; { return; }
void	wmgr_bottom(windowfd, rootfd) int     windowfd, rootfd; { return; }
int	wmgr_forktool(programname, otherargs, rectnormal, recticon, iconic)
        char    *programname, *otherargs; struct  rect *rectnormal, *recticon;
        int     iconic;
	{ return 0; }
int	wmgr_confirm(windowfd, text)
        int     windowfd; char    *text; { return(0); }
int	constructargs(args, programname, otherargs, maxargcount)
        char    *args[], *programname, *otherargs;
        int     maxargcount;
	{ return(0); }
wmgr_setrectalloc(rootfd, tool_left, tool_top, icon_left, icon_top)
        int     rootfd; short   tool_left, tool_top, icon_left, icon_top;
	{ }               
wmgr_getrectalloc(rootfd, tool_left, tool_top, icon_left, icon_top)
        int     rootfd; short   *tool_left, *tool_top, *icon_left, *icon_top;
	{ }
wmgr_figureiconrect(rootfd, rect) int     rootfd; struct  rect *rect; { }
wmgr_figuretoolrect(rootfd, rect) int     rootfd; struct  rect *rect; { }
int	wmgr_figuredefaults(rect, rectnext, xoffset, yoffset)
        struct  rect *rect, *rectnext; short   xoffset, yoffset;
	{ return(0); }
wmgr_changerect(feedbackfd, windowfd, event, move, noprompt)
        int feedbackfd, windowfd; struct inputevent *event; bool move, noprompt;
	{ return; }
void	wmgr_completechangerect(
	windowfd, rectnew, rectoriginal, parentprleft, parentprtop)
        int     windowfd; struct  rect *rectnew, *rectoriginal;
        int     parentprleft, parentprtop;
	{ }
void	wmgr_refreshwindow(windowfd) int     windowfd; { return; }
wmgr_constrainrect(rconstrain, rbound, dx, dy)
        struct rect *rconstrain, *rbound; int dx, dy; { }
void	wmgr_changestate(windowfd, rootfd, close)
        int     windowfd, rootfd; bool    close; { }
wmgr_explode(pixwin, rectto, rectfrom, op)
        struct  pixwin *pixwin; struct  rect *rectto, *rectfrom; int     op; { }
int	wmgr_iswindowopen(windowfd) int     windowfd; { }
void	wmgr_changelevelonly(windowfd, parentfd, top)
        int     windowfd, parentfd; bool    top; { }
void	wmgr_winandchildrenexposed(pixwin, rl)
        struct  pixwin *pixwin; struct  rectlist *rl; { }
void	wmgr_changelevel(windowfd, parentfd, top)
        int     windowfd, parentfd; bool    top; { return; }

/*VARARGS2*/
Panel_item
panel_create_item(panel, create_proc, arg1)
Panel		 panel;
Panel_item 	(*create_proc)();
Panel_attribute arg1;
{
   return (Panel_item) 0;
}

/*VARGS1*/
struct toolsw *
panel_create(t, arg1)
struct tool 	*t;
Panel_attribute arg1;
{
   return (struct toolsw *) 0;
}

/*VARARGS1*/
panel_free(object)
Panel object;
{
}

/*VARARGS*/
Panel_attribute_value
panel_get(object, attr)
Panel    	object;
Panel_attribute attr;
{
   return (caddr_t) 0;
}

/*VARARGS*/
int
panel_set(object, first_attr)
Panel object;
Panel_attribute first_attr;
{
   return 0;
}

/*VARARGS*/
int
panel_paint(object, flag)
Panel    	object;
Panel_setting   flag;
{
   return 0;
}

/*VARARGS*/
caddr_t *
panel_make_list(argv) 
caddr_t *argv; 
{
   return (caddr_t *) 0;
}

/*VARARGS*/
struct pixrect *
panel_button_image(object, string, width, font)
Panel     	  object;
char		  *string;
int		   width;
struct pixfont	  *font;
{
   return (struct pixrect *) 0;
}

Panel_item
panel_advance_caret(panel)
Panel	 panel;
{
   return (Panel_item) 0;
}

Panel_item
panel_backup_caret(panel)
Panel panel;
{
   return (Panel_item) 0;
}

Panel_setting
panel_text_notify(ip, ie)
Panel_item		ip;
struct inputevent	*ie;
{
   return (Panel_setting) 0;
}

FILE *
icon_open_header(from_file, error_msg, info)
	char			*from_file, *error_msg;
	icon_header_handle	 info;
{	return((FILE *)0);	}
int
icon_read_pr(fd, header, pr)
	FILE			*fd;
	icon_header_handle	 header;
	struct pixrect		*pr;
{	return(0);	}
struct pixrect *
icon_load_mpr(from_file, error_msg)
	char		*from_file, *error_msg;
{	return((struct pixrect *)0);	}
int
icon_init_from_pr(icon, pr)
	struct icon	*icon;
	struct pixrect	*pr;
{	return(0);	}
int
icon_load(icon, from_file, error_msg)
	struct icon	*icon;
	char		*from_file, *error_msg;
{	return(0);	}
